<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="s-binary-trees">
<title>Binary Trees</title>
<index><main>Binary Trees</main></index>
<subsection><title>Definition of a binary tree</title>
<p>An <term>ordered rooted tree</term> is a rooted tree whose subtrees are put into a definite order and are, themselves, ordered rooted trees. An empty tree and
a single vertex with no descendants (no subtrees) are ordered rooted trees.</p>

<example xml:id="ex-ordered-rooted"><title>Distinct Ordered Rooted Trees</title><p>The trees in Figure 10.4.1 are identical rooted trees, with root 1, but as ordered trees, they are different.</p>

          <figure xml:id="fig-ordered-rooted">
                <caption>Two different ordered rooted trees
                </caption>
                <image width="400" source="images/fig-ordered-rooted.png">
                    <description>Two different ordered rooted trees</description>
                </image>
            </figure>
</example> 

<p>If a tree rooted at <m>v</m> has <m>p</m> subtrees, we would refer to them as the first, second,... , \(p^{th}\) subtrees. If we restrict the number of subtrees of each vertex to be less than or equal to two, we have a <term>binary ordered tree</term>.  There is a subtle difference beween binary ordered trees and binary trees, which we define next.</p>
 
<definition xml:id="def-binary-tree"><title>Binary Tree</title>
<index><main>Binary Tree</main></index>
<statement>
<ol label="1">
<li><p>A tree consisting of no vertices (the empty tree) is a binary tree</p></li>
<li><p>A vertex together with two subtrees that are both binary trees is a binary tree. The subtrees are called the left and right subtrees of the binary tree.</p></li>
</ol>
</statement></definition>

<p>The difference between binary trees and binary ordered trees is that every vertex of a binary tree has exactly two subtrees (one or both of which may be
empty), while a vertex of an ordered tree may have any number of subtrees. The two trees in <xref ref="fig-diff-binary-trees" autoname="yes" /> would be considered identical as ordered
trees; however, they are different binary trees. Tree (a) has an empty right subtree and Tree (b) has an empty left subtree.</p>

          <figure xml:id="fig-diff-binary-trees">
                <caption>Two different binary trees
                </caption>
                <image width="400" source="images/fig-diff-binary-trees.png">
                    <description>Two different binary trees</description>
                </image>
            </figure>
            
<list><title>Terminology and General Facts about Binary Trees</title>
<ol label="a">
<li><p> A vertex of a binary tree with two empty subtrees is called a <term>leaf</term><index><main>Leaf, of a binary tree</main></index>. All other vertices are called \textit{ internal vertices}.</p></li>
<li><p> The number of leaves in a binary tree can vary from one up to roughly half the number of vertices in the tree (see Exercise 4 of this section).</p></li>
<li><p> The maximum number of vertices at level <m>k</m> of a binary tree is \(2^k\) , \(k\geq 0\) (see Exercise 6 of this section).</p></li>
<li><p> A <term>full binary tree</term><index><main>Full binary tree</main></index> is a tree for which each vertex has either zero or two empty subtrees. In other words, each vertex has either two or zero children. See <xref ref="exercise-full-tree" autoname="yes" /> of this section for a general fact about full binary trees.</p></li>
</ol>
</list>

</subsection>

<subsection xml:id="ss-traversals"><title>Traversals of Binary Trees</title><index><main>Traversals of Binary Trees</main></index>

<p>The traversal of a binary tree consists of visiting each vertex of the tree in some prescribed order. Unlike graph traversals, the consecutive vertices
that are visited are not always connected with an edge. The most common binary tree traversals are differentiated by the order in which the root
and its subtrees are visited. The three traversals are best described recursively and are:</p>


<dl>
<dd><p> Preorder Traversal:</p></dd>
<dt><ol label="1"><li><p> Visit the root of the tree.</p></li>
<li><p> Preorder traverse the left subtree.</p></li>
<li><p> Preorder traverse the right subtree.</p></li>
</ol>
</dt>

<dd><p> Inorder Traversal:</p></dd>
<dt><ol label="1"><li><p> Inorder traverse the left subtree.</p></li>
<li><p> Visit the root of the tree.</p></li>
<li><p> Inorder traverse the right subtree.</p></li>
</ol>
</dt>
<dd><p>  Postorder Traversal:</p></dd>
<dt><ol label="1"><li><p> Postorder traverse the left subtree.</p></li>
<li><p> Postorder traverse the right subtree.</p></li>
<li><p> Visit the root of the tree.</p></li>
</ol>
</dt>
</dl>


<p>Any traversal of an empty tree consists of doing nothing.</p>

<example xml:id="ex-10.4.2."><title>10.4.2.</title><p>For the tree in <xref ref="fig-bin-tree-10-4" autoname="yes" />, the orders in which the vertices are visited are:</p>
<ul>
<li><p>A-B-D-E-C-F-G, for the preorder traversal.</p></li>
<li><p>D-B-E-A-F-C-G, for the inorder traversal.</p></li>
<li><p>D-E-B-F-G-C-A, for the preorder traversal.</p></li>
</ul>
      <figure xml:id="fig-bin-tree-10-4">
			 <caption>A Complete Binary Tree to Level 2
			 </caption>
			 <image width="400" source="images/fig-bin-tree-10-4.png">
				  <description>A Complete Binary Tree to Level 2</description>
			 </image>
      </figure>
</example> 

<example xml:id="ex-binary-tree-sort"><title>Binary Tree Sort</title><p>Given a collection of integers (or other objects than can be ordered), one technique for sorting is a binary
tree sort. If the integers are \(a_1\), \(a_2, \ldots \), \(a_n\), \(n\geq 1\), we first execute the following algorithm that creates a binary
tree:</p>
<algorithm xml:id="alg-bin-sort-maketree"><title>Binary Sort Tree Creation</title>
<statement>
<ol label="1">
<li><p> Insert \(a_1\) into the root of the tree.</p></li>
<li><p> For k := 2 to n     ##insert \(a_k\) into the tree</p>
		<ol label="a">
			<li><p>r = \(a_1\)</p></li>
			<li><p>inserted = false</p></li>
			<li><p>while not(inserted):</p>
					<p><m>\quad </m>if \(a_k &lt; r\):</p>
					<p><m>\quad \quad </m>if \(r\) has a left child:</p>
					<p><m>\quad \quad \quad</m>r = left child of \(r\)</p>
					<p><m>\quad \quad</m> else: </p>
					<p><m>\quad \quad \quad</m>make \(a_k\) the left child of  \(r\) </p>
					<p><m>\quad \quad \quad</m>inserted = true </p>
					<p><m>\quad \quad</m>else:</p>
					<p><m>\quad \quad </m>if \(r\) has a right child:</p>
					<p><m>\quad \quad \quad</m>r = right child of \(r\)</p>
					<p><m>\quad \quad</m> else: </p>
					<p><m>\quad \quad \quad</m>make \(a_k\) the right child of  \(r\) </p>
					<p><m>\quad \quad \quad</m>inserted = true </p>
					</li>
		</ol></li>
</ol>
</statement>
</algorithm>
					
	
<p>If the integers to be sorted are 25, 17, 9, 20, 33, 13, and 30, then the tree that is created is the one in <xref ref="fig-sort-tree" autoname="yes" />. The inorder traversal of this tree is 9, 13, 17, 20, 25, 30, 33, the integers in ascending order. In general, the inorder traversal of the tree that is constructed in the algorithm above will produce a sorted list. The preorder and postorder traversals of the tree have no meaning here.</p>

        <figure xml:id="fig-sort-tree">
                <caption>A Binary Sorting Tree
                </caption>
                <image width="400" source="images/fig-sort-tree.png">
                    <description>Binary Sorting Tree</description>
                </image>
            </figure>

</example> 
</subsection>

<subsection xml:id="ss-expression-trees"><title>Expression Trees</title><index><main>Expression Tree</main></index>

<p>A convenient way to visualize an algebraic expression is by its expression tree. Consider the expression
 \[X = a*b - c/d + e\]. 
Since it is customary to put a precedence on multiplication/divisions, X is evaluated as \(((a*b) -(c/d)) + e\). Consecutive multiplication/divisions
or addition/subtractions are evaluated from left to right. We can analyze X further by noting that it is the sum of two simpler expressions \((a*b)
- (c/d)\) and \(e\). The first of these expressions can be broken down further into the difference of the expressions \(a*b\) and \(c/d\). When
we decompose any expression into \((\text{left} \text{expression}) (\text{operation}) (\text{right} \text{expression})\), the expression tree of that expression is the binary tree whose root contains the operation and whose left and right subtrees are the trees of the
left and right expressions, respectively. Additionally, a simple variable or a number has an expression tree that is a single vertex containing the
variable or number. The evolution of the expression tree for expression X appears in <xref ref="fig-expression-tree-build" autoname="yes" />.</p>

            <figure xml:id="fig-expression-tree-build">
                <caption>Building an Expression Tree
                </caption>
                <image width="600" source="images/fig-expression-tree-build.png">
                    <description>Building an Expression Tree</description>
                </image>
            </figure>

<example xml:id="ex-expression-tree-examples"><title>Some Expression Trees</title>
<ol label="a">
<li><p> If we intend to apply the addition and subtraction operations in <m>X</m> first, we would parenthesize the expression to \(a*(b - c)/(d + e)\).Its expression tree appears in <xref ref="fig-expression-tree-examples" autoname="yes" />a.</p></li>
<li><p> The expression trees for \(a^2-b^2\) and for \((a + b)*(a - b)\) appear in <xref ref="fig-expression-tree-examples" autoname="yes" />(b) and <xref ref="fig-expression-tree-examples" autoname="yes" />(c).
</p></li>
</ol>

		<figure xml:id="fig-expression-tree-examples">
			 <caption>Expression Tree Examples
			 </caption>
			 <image width="400" source="images/fig-expression-tree-examples.png">
				  <description>Expression Tree Examples</description>
			 </image>
		</figure>
 </example>


<p>The three traversals of an operation tree are all significant. A binary operation applied to a pair of numbers can be written in three ways. One
is the familiar infix form, such as \(a + b\) for the sum of a and b. Another form is prefix, in which the same sum is written \(+a b\). The final
form is postfix, in which the sum is written \(a b+\). Algebraic expressions involving the four standard arithmetic operations \((+,-,*, \text{and}
/)\) in prefix and postfix form are defined as follows:</p>


<list>
<title>Prefix and postfix forms of an algebraic expression</title>
<dl>
<dt>Prefix</dt><dd><ol label="a">
							<li><p>A variable or number is a prefix expression</p></li>
							<li><p>Any operation followed by a pair of prefix expressions is a prefix expression.</p></li></ol></dd>

<dt>Postfix</dt><dd><ol label="a">
							<li><p>A variable or number is a postfix expression</p></li>
							<li><p>Any pair of postfix expressions followed by an operation is a postfix expression.</p></li></ol></dd>
</dl>
</dl>
</list>

<p>The connection between traversals of an expression tree and these forms is simple:</p>

<ol label="a">
<li><p> The preorder traversal of an expression tree will result in the prefix form of the expression.</p></li>
<li><p> The postorder traversal of an expression tree will result in the postfix form of the expression.</p></li>
<li><p> The inorder traversal of an operation tree will not, in general, yield the proper infix form of the expression. If an expression requires parentheses in infix form, an inorder traversal of its expression tree has the effect of removing the parentheses.</p>
</li>
</ol>



<example xml:id="ex-expression-tree-traversal-example"><title>Traversing an Expression Tree</title><p> The preorder traversal of the tree in <xref ref="fig-expression-tree-build" autoname="yes" /> is \(+-*ab/cd e\), which is the prefix version of expression \textit{
X}. The postfix traversal is \(ab*cd/-e+\). Note that since the original form of X needed no parentheses, the inorder traversal, \(a*b-c/d+e\), is the correct infix version.</p>
</example>

</subsection>

<subsection xml:id="ss-counting-binary-trees"><title>Counting Binary Trees</title><index><main>Counting Binary Trees</main></index>

<p>We close this section with a formula for the number of different binary trees with <m>n</m> vertices. The formula is derived using generating
functions. Although the complete details are beyond the scope of this text, we will supply an overview of the derivation in order to illustrate how
generating functions are used in advanced combinatorics.</p>

<p>Let \(B(n)\) be the number of different binary trees of size <m>n</m> (<m>n</m> vertices), \(n \geq  0\). By our definition of a binary tree,
\(B(0) = 1\). Now consider any positive integer \(n + 1\), \(n \geq  0\). A binary tree of size \(n + 1\) has two subtrees, the sizes of which add
up to <m>n</m>. The possibilities can be broken down into \(n + 1\) cases:</p>
<blockquote>
<p>Case 0: Left subtree has size 0; right subtree has size <m>n</m>. </p>
<p>Case 1: Left subtree has size 1; right subtree has size \(n - 1\).</p>
<p> <m>\quad \quad </m>\(\vdots\)</p>
<p>Case <m>k</m>: Left subtree has size <m>k</m>; right subtree has size \(n - k\).</p>
<p> <m>\quad \quad </m>\(\vdots\)</p>
<p>Case <m>n</m>: Left subtree has size <m>n</m>; right subtree has size 0.</p>
</blockquote>

<p>In the general Case <m>k</m>, we can count the number of possibilities by multiplying the number of ways that the left subtree can be filled,
\(B(k)\), by the number of ways that the right subtree can be filled. \(B(n-k)\). Since the sum of these products equals \(B(n + 1)\), we obtain
a have the recurrence relation for \(n\geq 0\):


<mdn><mrow>
 B(n+1)= B(0)B(n)+ B(1)B(n-1)+ \cdots  + B(n)B(0)\quad \quad =\sum _{k=0}^n B(k) B(n-k)</mrow></mdn>
</p>

<p>Now take the generating function of both sides of this recurrence relation:
<mdn><mrow>\sum _{n=0}^{\infty } B(n+1) z^n= \sum _{n=0}^{\infty }  \left(\sum _{k=0}^n B(k) B(n-k)\right)z^n</mrow></mdn>
or
<mdn><mrow>G(B\uparrow ; z) = G(B*B; z) = G(B; z) ^2</mrow></mdn></p>



<p>Recall that \(G(B\uparrow ;z) =\frac{G(B;z)-B(0)}{z}=\frac{G(B;z)-1}{z}\) If we abbreviate \(G(B; z)\) to \(G\), we get 

\[\frac{G-1}{z}= G^2  \Rightarrow  z G^2- G + 1 = 0\]

Using the quadratic equation we find two solutions:

<mdn><mrow>G_1 = \frac{1+\sqrt{1-4 z}}{2z} \textrm{ and}</mrow>
<mrow> G_2 = \frac{1-\sqrt{1-4 z}}{2z}</mrow></mdn>

<p>
The gap in our deviation occurs here since we don't presume calculus.  If we expand \(G_1\) as an extended power series, we find 



<mdn><mrow>G_1 = \frac{1+\sqrt{1-4 z}}{2z}=\frac{1}{z}-1-z-2 z^2-5 z^3-14 z^4-42 z^5+\cdots</mrow></mdn></p>



<p>The coefficients after the first one are all negative and there is singularity at 0 because of the \(\frac{1}{z}\) term. However if
we do the same with \(G_2\) we get

<mdn><mrow>G_2= \frac{1-\sqrt{1-4 z}}{2z} = 1+z+2 z^2+5 z^3+14 z^4+42 z^5+\cdots</mrow></mdn></p>

<p>Further analysis leads to a closed form expression for \(B(n)\), which is



\[B(n) = \frac{1}{n+1}\left(
\begin{array}{c}
 2n \\
 n \\
\end{array}
\right)\].



This sequence of numbers is often called the \textit{ Catalan numbers. } For more information on the Catalan numbers, see the entry A000108 in The
On-Line Encyclopedia of Integer Sequences.</p>
</p>
</subsection>

<subsection xml:id="ss-sage-note-powerseries"><title>Sage Note - Power Series</title><index><main>Sage Note</main><sub>Power Series</sub></index>
<p>It may be of interest to note how the extended power series expansions of \(G_1\) and \(G_2\) are determined using Sage.  In Sage, one has the capability of being very specific about how algebraic expressions should be interpreted by specifying the underlying ring. This can make working with various algebraic expressions a bit more confusing to the beginner.  Here is how to get a Laurent expansion for \(G_1\) above.</p>

<sage>
<input>
R.&lt;z>=PowerSeriesRing(ZZ,'z')
G1=(1+sqrt(1-4*z))/(2*z)}
G1
</input>
</sage>


<p>The first Sage expression above declares a structure called a <term>ring</term> that contains power series. We are not using that whole structure, just a specific
element, <c>G1</c>. So the important thing about this first input is that it establishes <c>z</c> as being a variable associated with power series over the integers.  When the second expression defines the value of <c>G1</c> in terms of <c>z</c>, it is automatically converted to a power series.</p>

<p>The expansion of \(G_2\) uses identical code:</p>

<sage>
<input>
R.&lt;z>=PowerSeriesRing(ZZ,'z')
G2=(1-sqrt(1-4*z))/(2*z)}
G2
</input>
</sage>

<p> In Chapter 16 we will introduce rings and will be able to take further advantage of Sage's capabilities in this area.</p>
</subsection>

<exercises xml:id="exercises-10-4">
<title>Exercises for Section 10.4</title>
<exercisegroup>
<introduction><p>A Exercises</p></introduction>
<exercise number="1"><statement><p> Draw the expression trees for the following expressions:</p>
<ol label="a">
<li><p> \(a(b + c)\) </p></li>
<li><p> \(a b + c\) </p></li>
<li><p> \(a b + a c\) </p></li>
<li><p> \(b b - 4 a c\)</p></li>
<li><p> \(\left(\left(a_3 x + a_2\right)x +a_1\right)x + a_0\)</p></li>
</ol>
</statement></exercise>
<exercise number="2"><statement><p> Draw the expression trees for</p>
<ol label="a">
<li><p> \(\frac{x^2-1}{x-1}\)</p></li>
<li><p> \(x y + x z + y z\)</p></li>
</ol>
</statement></exercise>
<exercise number="3"><statement><p> Write out the preorder, inorder, and postorder traversals of the trees in Exercise 1 above.</p>
</statement></exercise>
<exercise number="4"><statement> <p>Verify the formula for \(B(k)\), \(0 \leq  k \leq  3\) by drawing all binary trees with three or fewer vertices</p>.
</statement></exercise>
<exercise number="5"><statement>
<ol label="a">
<li><p> Draw a binary tree with seven vertices and only one leaf.</p></li>
<li><p>(b) Draw a binary tree with seven vertices and as many leaves as possible.</p></li>
</ol>
</statement></exercise>
</exercisegroup>
<exercisegroup>
<introduction><p>B Exercises</p></introduction>
<exercise number="6"><statement><p> Prove that the maximum number of vertices at level <m>k</m> of a binary tree is \(2^k\) and that a tree with that many vertices at level
<m>k</m> must have  \(2^{k+1}-1\) vertices.</p>
</statement></exercise>
<exercise number="7" xml:id="exercise-full-tree"><statement><p> Prove that if <m>T</m> is a full binary tree, then the number of leaves of <m>T</m> is one more than the number of internal vertices
(non-leaves).</p>
</statement></exercise>
<exercise number="8"><statement><p> Use Sage to determine the sequence whose generating function is \(G(z) =\frac{1}{(1-z)^3}\) </p>
</statement></exercise>
</exercisegroup>
</exercises>
</section>