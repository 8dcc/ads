<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="s-The Monoid of a Finite-State Machine">
<title>The Monoid of a Finite-State Machine</title>
<index><main>The Monoid of a Finite-State Machine</main></index>



In this section, we will see how every finite-state machine has a monoid associated with it. For any finite-state machine, the elements of its associated
monoid correspond to certain input sequences. Because only a finite number of combinations of states and inputs is possible for a finite-state machine
there is only a finite number of input sequences that summarize the machine This idea is illustrated best with a few examples.

<example xml:id="ex-14.4.1."><title>14.4.1.</title><p></p></example> Consider the parity checker. The following table summarizes the effect on the parity checker of strings in \(B^1\) and \(B^2\)
. The row labeled <q>Even</q> contains the final state and final output as a result of each input string in \(B^1\) and \(B^2\) when the machine
starts in the even state. Similarly, the row labeled <q>Odd</q> contains the same information for input sequences when the machine starts in the
odd state.



\(\begin{array}{c|cccccc}
 \textrm{ Input} \textrm{ String} &amp; 0 &amp; 1 &amp; 00 &amp; 01 &amp; 10 &amp; 11 \\
\hline
 \textrm{ Even} &amp; (\textrm{ Even},0) &amp; (\textrm{ Odd},1) &amp; (\textrm{ Even},0) &amp; (\textrm{ Odd},1) &amp; (\textrm{ Odd},1) &amp; (\textrm{ Even},0) \\
 \textrm{ Odd} &amp; (\textrm{ Odd},1) &amp; (\textrm{ Even},1) &amp; (\textrm{ Odd},1) &amp; (\textrm{ Even},1) &amp; (\textrm{ Even},0) &amp; (\textrm{ Odd},1) \\
 \textrm{ Same} \textrm{ Effect} \textrm{ as} &amp;   &amp;   &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\
\end{array}\)

Note how, as indicated in the last row, the strings in \(B^2\) have the same effect as certain strings in \(B^1\). For this reason, we can summarize
the machine in terms of how it is affected by strings of length 1. The actual monoid that we will now describe consists of a set of functions, and
the operation on the functions will be based on the concatenation operation.

Let \(T_0\) be the final effect (state and output) on the parity checker of the input 0. Similarly, \(T_1\) is defined as the final effect on the
parity checker of the input 1.  More precisely,

\(T_0(\textrm{ even})=(\textrm{ even},0)\)  $\quad \quad $and \(T_0(\textrm{ odd})=(\textrm{ odd},1)\) , 

while

\(T_1(\textrm{ even})=(\textrm{ odd},1)\) $\quad \quad $and \(T_1(\textrm{ odd})=(\textrm{ even},0)\).

In general, we define the operation on a set of such functions as follows: if <m>s</m>, <m>t</m> are input sequences and \(T_s\) and \(T_t\),
are functions as above, then \(T_s*T_t=T_{\textrm{ \textit{st}}}\), that is, the result of the function that summarizes the effect on the machine by
the concatenation of <m>s</m> with <m>t</m>. Since, for example, 01 has the same effect on the parity checker as 1, \(T_0*T_1=T_{01}=T_1\).
We don't stop our calculation at \(T_{01}\) because we want to use the shortest string of inputs to describe the final result. A complete table for
the monoid of the parity checker is



 \(\begin{array}{c|c}
 * &amp; 
\begin{array}{cc}
 T_0 &amp; T_1 \\
\end{array}
 \\
\hline
 
\begin{array}{c}
 T_0 \\
 T_1 \\
\end{array}
 &amp; 
\begin{array}{cc}
 T_0 &amp; T_1 \\
 T_1 &amp; T_0 \\
\end{array}
 \\
\end{array}\)

What is the identify of this monoid? The monoid of the parity checker is isomorphic to the monoid \(\left[\mathbb{Z}_2\right.\), \(+_2\)].

This operation may remind you of the composition operation on functions, but there are two principal differences. The domain of \(T_s\) is not the
codomain of \(T_t\) and the functions are read from left to right unlike in composition, where they are normally read from right to left.

You may have noticed that the output of the parity checker echoes the state of the machine and that we could have looked only at the effect on the
machine as the final state. The following example has the same property, hence we will only consider the final state.

<example xml:id="ex-14.4.2."><title>14.4.2.</title><p></p></example> The transition diagram for the machine that recognizes strings in B*.  that have no consecutive 1{'}s appears in Figure
14.4.1. Note how it is similar to the graph in Figure 9.1.1. Only a <q>reject state</q> has been added, for the case when an input of 1 occurs while
in State <m>a</m>. We construct a similar table to the one in the previous example to study the effect of certain strings on this machine. This
time, we must include strings of length 3 before we recognize that no <q>new effects</q> can be found.


\begin{center}\(\)
\end{center}


\caption{\pmb{ Figure 14.4.1\\
}}



 \(\begin{array}{ccccccccccccccc}
 \textrm{ Inputs} &amp; 0 &amp; 1 &amp; 00 &amp; 01 &amp; 10 &amp; 11 &amp; 000 &amp; 001 &amp; 010 &amp; 011 &amp; 100 &amp; 101 &amp; 110 &amp; 111 \\
 s &amp; b &amp; a &amp; b &amp; a &amp; b &amp; r &amp; b &amp; a &amp; b &amp; r &amp; b &amp; a &amp; r &amp; r \\
 a &amp; b &amp; r &amp; b &amp; a &amp; r &amp; r &amp; b &amp; a &amp; b &amp; r &amp; r &amp; r &amp; r &amp; r \\
 b &amp; b &amp; a &amp; b &amp; a &amp; b &amp; r &amp; b &amp; a &amp; b &amp; r &amp; b &amp; a &amp; r &amp; r \\
 r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r \\
 \textrm{ Same} \textrm{ as} &amp;   &amp;   &amp; 0 &amp;   &amp;   &amp;   &amp; 0 &amp; 01 &amp; 0 &amp; 11 &amp; 10 &amp; 1 &amp; 11 &amp; 11 \\
\end{array}\)

The following table summarizes how combinations of the strings \(0,1,01,10, \textrm{ and} 11\) affect this machine.



 \(\begin{array}{c|c}
 * &amp; 
\begin{array}{ccccc}
 T_0 &amp; T_1 &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
\end{array}
 \\
\hline
 
\begin{array}{c}
 T_0 \\
 T_1 \\
 T_{01} \\
 T_{10} \\
 T_{11} \\
\end{array}
 &amp; 
\begin{array}{ccccc}
 T_0 &amp; T_1 &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
 T_{10} &amp; T_{11} &amp; T_1 &amp; T_{11} &amp; T_{11} \\
 T_0 &amp; T_{11} &amp; T_{01} &amp; T_{11} &amp; T_{11} \\
 T_{10} &amp; T_1 &amp; T_1 &amp; T_{10} &amp; T_{11} \\
 T_{11} &amp; T_{11} &amp; T_{11} &amp; T_{11} &amp; T_{11} \\
\end{array}
 \\
\end{array}\)

All the results in this table can be obtained using the previous table. For example,

\(T_{10}*T_{01}=T_{1001}=T_{100}*T_1=T_{10}*T_1=T_{101}=T_1\\
\\
\textrm{       }\textrm{ and} \\
\\
T_{01}*T_{01}=T_{0101}=T_{010}T_1=T_0T_1=T_{01}.\) 



Note that none of the elements that we have listed in this table serves as the identity for our operation. This problem can always be remedied by
including the function that corresponds to the input of the null string, \(T_{\lambda }\). Since the null string is the identity for concatenation
of strings, \(T_sT_{\lambda }=T_{\lambda }T_s=T_s\) for all input strings <m>s</m>.

<example xml:id="ex-14.4.3."><title>14.4.3.</title><p></p></example> A finite-state machine called the unit-time delay machine does not echo its current state, but prints its previous state.
For this reason, when we find the monoid of the unit-time delay machine, we must consider both state and output. The transition diagram of this machine
appears in Figure 14.4.2.


\begin{center}\(\)
\end{center}


\caption{\pmb{ Figure 14.4.2\\
}}



 \(\begin{array}{c|c}
 \textrm{ Input} &amp; 
\begin{array}{cccccccccc}
  &amp; 
\begin{array}{cc}
 0\textrm{      } &amp; \text 1 \\
\end{array}
\textrm{      } &amp; \textrm{     }00\textrm{          } &amp; \textrm{     }01\textrm{       } &amp; \textrm{       }10\textrm{        } &amp; 11\textrm{      } &amp; 100\textrm{ or}000\textrm{ 
    } &amp; 101\textrm{ or}001\textrm{    } &amp; 110\textrm{ or}101\textrm{      } &amp; 111\textrm{ or}011 \\
\end{array}
 \\
\hline
 
\begin{array}{c}
 0 \\
 1 \\
 \textrm{ Same} \textrm{ as} \\
\end{array}
 &amp; 
\begin{array}{cccccccccc}
 (0,0) &amp; (1,0) &amp; (0,0) &amp; (1,0) &amp; (0,1) &amp; (1,1) &amp; (0,0) &amp; (1,0) &amp; (0,1) &amp; (1,1) \\
 (0,1) &amp; (1,1) &amp; (0,0) &amp; (1,0) &amp; (0,1) &amp; (1,1) &amp; (0,0) &amp; (1,0) &amp; (0,1) &amp; (1,1) \\
   &amp;   &amp;   &amp;   &amp;   &amp;   &amp; 00 &amp; 01 &amp; 10 &amp; 11 \\
\end{array}
 \\
\end{array}\)

Again, since no new outcomes were obtained from strings of length 3, only strings of length 2 or less contribute to the monoid of the machine. The
table for the strings of positive length shows that we must add \(T_{\lambda }\) to obtain a monoid.



 \(\begin{array}{c|c}
 * &amp; 
\begin{array}{cccccc}
 T_0\text  &amp; T_1  &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
\end{array}
 \\
\hline
 
\begin{array}{c}
 T_0 \\
 T_1 \\
 T_{00} \\
 T_{01} \\
 T_{10} \\
 T_{11} \\
\end{array}
 &amp; 
\begin{array}{cccccc}
 T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
 T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
 T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
 T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
 T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
 T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
\end{array}
 \\
\end{array}\)


\subsection{
<exercises xml:id="exercises-14-4">
<title>Exercises for Section 14.4</title>
}



<subsection xml:id="ss-A Exercise"><title>A Exercise</title><index><main>A Exercise</main></index>

<exercise number="1"><statement>  For each of the transition diagrams in Figure 14.4.3, write out tables for their associated monoids. Identify the identity in terms of a string
of positive length, if possible. (Hint. : Where the output echoes the current state, the output can be ignored.)

\begin{doublespace}
\noindent\(\begin{array}{cc}
  &amp;  \\
\end{array}\)
\end{doublespace}


\caption{\pmb{ Figure 14.4.3\\
}}


</exercisegroup>
<exercisegroup>
<introduction><p>B Exercises</p></introduction>
</statement></exercise>
<exercise number="2"><statement>  What common monoids are isomorphic to the monoids obtained in the previous exercise?


</exercisegroup>
<exercisegroup>
<introduction><p>C Exercises</p></introduction>
</statement></exercise>
<exercise number="3"><statement>  Can two finite-state machines with nonisomorphic transition diagrams have isomorphic monoids?

</p></statement></exercise>
</exercises>
</section>
